{"version":3,"sources":["BurgerAssets/top.svg","BurgerAssets/bottom.svg","BurgerAssets/lettuce2.svg","BurgerAssets/tomato.svg","BurgerAssets/cheese.svg","BurgerAssets/layerofonions.svg","components/Top.js","components/Bottom.js","components/Lettuce.js","components/Tomato.js","components/Cheese.js","components/Onion.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Top","src","require","alt","Bottom","Lettuce","Tomato","Cheese","Onion","App","useState","top","cheese","setCheese","lettuce","setLettuce","tomato","setTomato","onion","setOnion","bottom","Container","fluid","className","map","comp","i","key","Button","color","onClick","e","preventDefault","toast","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ecab3875.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/top.11bb107f.svg\";","module.exports = __webpack_public_path__ + \"static/media/bottom.331698bb.svg\";","module.exports = __webpack_public_path__ + \"static/media/lettuce2.e8c1d654.svg\";","module.exports = __webpack_public_path__ + \"static/media/tomato.33b07ded.svg\";","module.exports = __webpack_public_path__ + \"static/media/cheese.4a1b5843.svg\";","module.exports = __webpack_public_path__ + \"static/media/layerofonions.f2c1b013.svg\";","import React from \"react\";\r\n\r\nconst Top = () => {\r\n  return <img src={require(\"../BurgerAssets/top.svg\")} alt=\"\" />;\r\n};\r\n\r\nexport default Top;\r\n","import React from \"react\";\r\n\r\nconst Bottom = () => {\r\n  return <img src={require(\"../BurgerAssets/bottom.svg\")} alt=\"\" />;\r\n};\r\n\r\nexport default Bottom;\r\n","import React from \"react\";\r\n\r\nconst Lettuce = () => {\r\n  return <img src={require(\"../BurgerAssets/lettuce2.svg\")} alt=\"\" />;\r\n};\r\n\r\nexport default Lettuce;\r\n","import React from \"react\";\r\n\r\nconst Tomato = () => {\r\n  return <img src={require(\"../BurgerAssets/tomato.svg\")} alt=\"\" />;\r\n};\r\n\r\nexport default Tomato;\r\n","import React from \"react\";\r\n\r\nconst Cheese = () => {\r\n  return <img src={require(\"../BurgerAssets/cheese.svg\")} alt=\"\" />;\r\n};\r\n\r\nexport default Cheese;\r\n","import React from \"react\";\r\n\r\nconst Onion = () => {\r\n  return <img src={require(\"../BurgerAssets/layerofonions.svg\")} alt=\"\" />;\r\n};\r\n\r\nexport default Onion;\r\n","import React, { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Button } from \"reactstrap\";\nimport \"./App.css\";\nimport Top from \"./components/Top\";\nimport Bottom from \"./components/Bottom\";\nimport Lettuce from \"./components/Lettuce\";\nimport Tomato from \"./components/Tomato\";\nimport Cheese from \"./components/Cheese\";\nimport Onion from \"./components/Onion\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nfunction App() {\n  const [top, setTop] = useState([1]);\n  const [cheese, setCheese] = useState([]);\n  const [lettuce, setLettuce] = useState([]);\n  const [tomato, setTomato] = useState([]);\n  const [onion, setOnion] = useState([]);\n  const [bottom, setBottom] = useState([1]);\n\n  return (\n    <Container fluid className=\"mycontainer\">\n      <ToastContainer />\n      <div className=\"row \">\n        <div className=\"col-lg-6 col-sm-12 text-center\">\n          <h2 className=\"title\">I Love Burger</h2>\n          {top.map((comp, i) => (\n            <Top key={i} />\n          ))}\n          {cheese.map((comp, i) => (\n            <Cheese key={i} />\n          ))}\n          {lettuce.map((comp, i) => (\n            <Lettuce key={i} />\n          ))}\n          {onion.map((comp, i) => (\n            <Onion key={i} />\n          ))}\n          {tomato.map((comp, i) => (\n            <Tomato key={i} />\n          ))}\n\n          {bottom.map((comp, i) => (\n            <Bottom key={i} />\n          ))}\n        </div>\n        <div className=\"col-lg-6 col-sm-12 text-center buttons\">\n          <h2 className=\"title\">Make your own burger</h2>\n          <Button\n            color=\"warning\"\n            className=\"btn\"\n            onClick={(e) => {\n              e.preventDefault();\n              setCheese([...cheese, 1]);\n              toast(\"Added a layer of cheese\", { type: \"warning\" });\n            }}\n          >\n            Add Cheese\n          </Button>\n          <Button\n            color=\"success\"\n            className=\"btn\"\n            onClick={(e) => {\n              e.preventDefault();\n              setLettuce([...lettuce, 1]);\n              toast(\"Added a layer of lettuce\", { type: \"success\" });\n            }}\n          >\n            Add Lettuce\n          </Button>\n          <Button\n            color=\"primary\"\n            className=\"btn\"\n            onClick={(e) => {\n              e.preventDefault();\n              setOnion([...onion, 1]);\n              toast(\"Added a layer of onions\", { type: \"info\" });\n            }}\n          >\n            Add Onion\n          </Button>\n          <Button\n            color=\"danger\"\n            className=\"btn\"\n            onClick={(e) => {\n              e.preventDefault();\n              setTomato([...tomato, 1]);\n              toast(\"Added a layer of tomatos\", { type: \"error\" });\n            }}\n          >\n            Add Tomato\n          </Button>\n        </div>\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}