{"version":3,"sources":["BurgerAssets/top.svg","BurgerAssets/bottom.svg","BurgerAssets/lettuce2.svg","BurgerAssets/tomato.svg","BurgerAssets/cheese.svg","BurgerAssets/layerofonions.svg","components/Top.js","components/Bottom.js","components/Lettuce.js","components/Tomato.js","components/Cheese.js","components/Onion.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Top","src","require","alt","Bottom","Lettuce","Tomato","Cheese","Onion","App","useState","top","cheese","setCheese","lettuce","setLettuce","tomato","setTomato","onion","setOnion","bottom","Container","fluid","className","map","comp","i","key","strings","typeSpeed","Button","color","onClick","e","preventDefault","toast","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.49273704.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/top.07c652e2.svg\";","module.exports = __webpack_public_path__ + \"static/media/bottom.4d2a5693.svg\";","module.exports = __webpack_public_path__ + \"static/media/lettuce2.00c7e1ad.svg\";","module.exports = __webpack_public_path__ + \"static/media/tomato.3d6d8c30.svg\";","module.exports = __webpack_public_path__ + \"static/media/cheese.96c5b3a4.svg\";","module.exports = __webpack_public_path__ + \"static/media/layerofonions.fc145387.svg\";","import React from \"react\";\r\n\r\nconst Top = () => {\r\n  return <img src={require(\"../BurgerAssets/top.svg\")} alt=\"\" />;\r\n};\r\n\r\nexport default Top;\r\n","import React from \"react\";\r\n\r\nconst Bottom = () => {\r\n  return <img src={require(\"../BurgerAssets/bottom.svg\")} alt=\"\" />;\r\n};\r\n\r\nexport default Bottom;\r\n","import React from \"react\";\r\n\r\nconst Lettuce = () => {\r\n  return <img src={require(\"../BurgerAssets/lettuce2.svg\")} alt=\"\" />;\r\n};\r\n\r\nexport default Lettuce;\r\n","import React from \"react\";\r\n\r\nconst Tomato = () => {\r\n  return <img src={require(\"../BurgerAssets/tomato.svg\")} alt=\"\" />;\r\n};\r\n\r\nexport default Tomato;\r\n","import React from \"react\";\r\n\r\nconst Cheese = () => {\r\n  return <img src={require(\"../BurgerAssets/cheese.svg\")} alt=\"\" />;\r\n};\r\n\r\nexport default Cheese;\r\n","import React from \"react\";\r\n\r\nconst Onion = () => {\r\n  return <img src={require(\"../BurgerAssets/layerofonions.svg\")} alt=\"\" />;\r\n};\r\n\r\nexport default Onion;\r\n","import React, { useState } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Container, Button } from \"reactstrap\";\r\nimport \"./App.css\";\r\nimport Top from \"./components/Top\";\r\nimport Bottom from \"./components/Bottom\";\r\nimport Lettuce from \"./components/Lettuce\";\r\nimport Tomato from \"./components/Tomato\";\r\nimport Cheese from \"./components/Cheese\";\r\nimport Onion from \"./components/Onion\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport Typed from \"react-typed\";\r\n\r\nfunction App() {\r\n  const [top, setTop] = useState([1]);\r\n  const [cheese, setCheese] = useState([]);\r\n  const [lettuce, setLettuce] = useState([]);\r\n  const [tomato, setTomato] = useState([]);\r\n  const [onion, setOnion] = useState([]);\r\n  const [bottom, setBottom] = useState([1]);\r\n\r\n  return (\r\n    <Container fluid className=\"mycontainer\">\r\n      <ToastContainer />\r\n      <div className=\"row \">\r\n        <div className=\"col-lg-6 col-sm-12 text-center\">\r\n          <h2 className=\"title\">I Love Burger</h2>\r\n          {top.map((comp, i) => (\r\n            <Top key={i} />\r\n          ))}\r\n          {cheese.map((comp, i) => (\r\n            <Cheese key={i} />\r\n          ))}\r\n          {lettuce.map((comp, i) => (\r\n            <Lettuce key={i} />\r\n          ))}\r\n          {onion.map((comp, i) => (\r\n            <Onion key={i} />\r\n          ))}\r\n          {tomato.map((comp, i) => (\r\n            <Tomato key={i} />\r\n          ))}\r\n\r\n          {bottom.map((comp, i) => (\r\n            <Bottom key={i} />\r\n          ))}\r\n        </div>\r\n        <div className=\"col-lg-6 col-sm-12 text-center buttons\">\r\n          <h2>\r\n            <Typed strings={[\"Make your own burger\"]} typeSpeed={40} />\r\n          </h2>\r\n          <Button\r\n            color=\"warning\"\r\n            className=\"btn\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              setCheese([...cheese, 1]);\r\n              toast(\"Added a layer of cheese\", { type: \"warning\" });\r\n            }}\r\n          >\r\n            Add Cheese\r\n          </Button>\r\n          <Button\r\n            color=\"success\"\r\n            className=\"btn\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              setLettuce([...lettuce, 1]);\r\n              toast(\"Added a layer of lettuce\", { type: \"success\" });\r\n            }}\r\n          >\r\n            Add Lettuce\r\n          </Button>\r\n          <Button\r\n            color=\"primary\"\r\n            className=\"btn\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              setOnion([...onion, 1]);\r\n              toast(\"Added a layer of onions\", { type: \"info\" });\r\n            }}\r\n          >\r\n            Add Onion\r\n          </Button>\r\n          <Button\r\n            color=\"danger\"\r\n            className=\"btn\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              setTomato([...tomato, 1]);\r\n              toast(\"Added a layer of tomatos\", { type: \"error\" });\r\n            }}\r\n          >\r\n            Add Tomato\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}